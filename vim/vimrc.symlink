let mapleader = "\<Space>"

execute pathogen#infect()
"set number
set hlsearch
set numberwidth=3
syntax on
filetype plugin indent on

"Create parent directories on save, if not present
augroup BWCCreateDir
	autocmd!
	autocmd BufWritePre * if expand("<afile>")!~#'^\w\+:/' && !isdirectory(expand("%:h")) | execute "silent! !mkdir -p ".shellescape(expand('%:h'), 1) | redraw! | endif
augroup END

let NERDTreeMapActivateNode='f'
let NERDTreeIgnore = ['\.pyc$', '\.out$']
let g:nerdtree_tabs_open_on_console_startup=0
let NERDTreeWinSize=28

nnoremap <F4> :NERDTreeFind<CR>
nnoremap <F5> :NERDTreeToggle<CR>

"tab movements"
inoremap <C-h> <Esc>:tabprevious<CR>
inoremap <C-l> <Esc>:tabnext<CR>

nnoremap <C-h> :tabprevious<CR>
nnoremap <C-l> :tabnext<CR>

nnoremap <Leader>h :tabprevious<CR>
nnoremap <Leader>l :tabnext<CR>

"vim split movements
nmap <silent> <A-Up> :wincmd k<CR>
nmap <silent> <A-Down> :wincmd j<CR>
nmap <silent> <A-Left> :wincmd h<CR>
nmap <silent> <A-Right> :wincmd l<CR>

imap <silent> <A-Up> <Esc>:wincmd k<CR>
imap <silent> <A-Down> <Esc>:wincmd j<CR>
imap <silent> <A-Left> <Esc>:wincmd h<CR>
imap <silent> <A-Right> <Esc>:wincmd l<CR>

set pastetoggle=<F3>
"autocmd Filetype python setlocal ts=8 et sw=4 sts=4

"colorscheme torte

nnoremap <F2> :set nonumber!<CR>
"nnoremap <C-j> :set invnumber<CR>
"inoremap <C-j> <Esc>:set invnumber<CR>

inoremap jk <Esc>
inoremap jkj <Esc>:w<CR>
inoremap jkjk <Esc>:wq<CR>
inoremap {{  {<CR>}<Esc>O

"" SOLARIZED THEME
"set background=dark
"set t_Co=16
"let g:solarized_termcolors=16
"colorscheme solarized

if filereadable(glob("~/.local_vimrc")) 
	source ~/.local_vimrc
endif

"Expand visual region settings
vmap v <Plug>(expand_region_expand)
vmap <C-v> <Plug>(expand_region_shrink)

call expand_region#custom_text_objects({
      \ "\/\\n\\n\<CR>": 1,
      \ 'i>' :1,
      \ 'a>' :1,
      \ 'a]' :1,
      \ 'ab' :1,
      \ 'aB' :1,
      \ 'ii' :0,
      \ 'ai' :0,
      \ })

"match < and > for C++ templates
:set matchpairs+=<:>

"go back to original point after selection
vnoremap <silent> y y`]
vnoremap <silent> p p`]
nnoremap <silent> p p`]

"map q: for typo
map q: :q

"map space to leader and define more mappings
vmap <Leader>y "+y
vmap <Leader>d "+d
nmap <Leader>p "+p
nmap <Leader>P "+P
vmap <Leader>p "+p
vmap <Leader>P "+P
nmap <Leader>i ^
nmap <Leader>a $

" Now I can select some text and paste over it without 
" worrying my paste buffer is
" replaced by just just removed text
" vp doesn't replace paste buffer
function! RestoreRegister()
  let @" = s:restore_reg
  return ''
endfunction
function! s:Repl()
  let s:restore_reg = @"
  return "p@=RestoreRegister()\<cr>"
endfunction
vmap <silent> <expr> p <sid>Repl()

"Ctrl-P
nnoremap <Leader>o :CtrlPMixed<CR>
"" Show MRU files for the current project only
let g:ctrlp_mruf_relative = 1
" Open files of vim in new tab
let g:ctrlp_open_new_file = 't'
let g:ctrlp_prompt_mappings = {
    \ 'AcceptSelection("e")': ['<c-t>'],
    \ 'AcceptSelection("t")': ['<cr>'],
    \ }

