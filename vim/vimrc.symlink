if has('vim_starting')
 set nocompatible               " Be iMproved

 " Required:
 set runtimepath+=~/.vim/bundle/neobundle.vim/
endif

" Required:
call neobundle#begin(expand('~/.vim/bundle/'))

" Let NeoBundle manage NeoBundle
" Required:
NeoBundleFetch 'Shougo/neobundle.vim'

" My Bundles here:
NeoBundle 'terryma/vim-expand-region'
NeoBundle 'scrooloose/nerdtree'
NeoBundle 'jistr/vim-nerdtree-tabs'
NeoBundle 'scrooloose/syntastic'
NeoBundle 'kien/ctrlp.vim'
NeoBundle 'tpope/vim-fugitive'
NeoBundle 'tpope/vim-endwise'
NeoBundle 'Valloric/YouCompleteMe'
NeoBundle 'Valloric/ListToggle'
NeoBundle 'altercation/vim-colors-solarized'
NeoBundle 'elzr/vim-json'

call neobundle#end()

filetype plugin indent on

" If there are uninstalled bundles found on startup,
" this will conveniently prompt you to install them.
NeoBundleCheck

let mapleader = "\<Space>"
syntax on

set wildignore+=*/tmp/*,*.so,*.swp,*.zip,*.d,*.o,*.pyc     " MacOSX/Linux

"global ycm_conf {
let g:ycm_global_ycm_extra_conf = '~/.ycm_extra_conf.py'
let g:ycm_confirm_extra_conf = 0 "turn off confirmation message from ycm
let g:ycm_always_populate_location_list = 1 "add errors in the location list
let g:ycm_show_diagnostics_ui = 1 "compile c++ code with clang on the spot
let g:ycm_min_num_of_chars_for_completion = 2
let g:ycm_auto_trigger = 1

"Close Scratch buffer on move/close from insert mode
autocmd CursorMovedI * if pumvisible() == 0|pclose|endif
autocmd InsertLeave * if pumvisible() == 0|pclose|endif
" }

" quick fix shortcuts {
let g:lt_location_list_toggle_map = '<F7>'
let g:lt_quickfix_list_toggle_map = '<F8>'
set switchbuf+=usetab,newtab "quick fix menu options
" }

" syntastic config {
let g:syntastic_python_checkers = ['flake8']
let g:syntastic_ruby_checkers = ['mri', 'rubocop']
let g:syntastic_json_checkers = ['jsonlint']
let g:syntastic_python_pep8_args='--ignore=W191'
let g:syntastic_always_populate_loc_list = 1
" }

" Fugitive mappings
"autocmd QuickFixCmdPost *grep* cwindow

" NerdTree settings {
let NERDTreeMapActivateNode='f'
let NERDTreeIgnore = ['\.pyc$', '\.out$']
let g:nerdtree_tabs_open_on_console_startup=0
let NERDTreeWinSize=28
nnoremap <F3> :NERDTreeFind<CR>
nnoremap <F4> :NERDTreeToggle<CR>
" }

" General VIM setting {
set hlsearch
set cursorline " highlight current line
set wildmenu   " visual autocomplete for command menu
set ignorecase "ignore case
set numberwidth=3 "Col width when printing line nos.
set shortmess+=IA "no intro message, no swap-file message
" set pastetoggle=<F3>
set tabpagemax=100
set vb t_vb= " set silent (no beep)
" nnoremap <F2> :set nonumber!<CR>
inoremap jk <Esc>l| "try to shift right one char to go back to same place
vnoremap <silent> y y`]| "go back to original point after selection
set matchpairs+=<:> "match < and > for C++ templates
set backspace=indent,eol,start "Specific to mac with ssh session (delete key)
imap <C-v> "+p| "Auto :set paste during paste
set pastetoggle=<F2>
" }

" File types {
let g:vim_json_warnings=0
au BufRead,BufNewFile *.yaml set filetype=yaml
" }

" Tab movements {
inoremap <C-h> <Esc>:tabprevious<CR>
nnoremap <C-h> :tabprevious<CR>
nnoremap <Leader>h :execute "tabmove" tabpagenr() - 2 <CR>

inoremap <C-l> <Esc>:tabnext<CR>
nnoremap <C-l> :tabnext<CR>
nnoremap <Leader>l :execute "tabmove" tabpagenr() <CR>
" }

" Indent setting for all {
set ai sta et fo=croql
set shiftwidth=4 softtabstop=4
autocmd Filetype python setlocal shiftwidth=4 softtabstop=4
autocmd Filetype ruby setlocal shiftwidth=2 softtabstop=2
autocmd Filetype json setlocal shiftwidth=2 softtabstop=2
" }

"" SOLARIZED THEME {
set background=dark
set t_Co=16
let g:solarized_termcolors=16
colorscheme solarized
" }

"Expand visual region settings {
vmap v <Plug>(expand_region_expand)
vmap <C-v> <Plug>(expand_region_shrink)

call expand_region#custom_text_objects({
      \ "\/\\n\\n\<CR>": 1,
      \ "a'" :1,
      \ 'a"' :1,
      \ 'a]' :1,
      \ 'ab' :1,
      \ 'aB' :1,
      \ 'ii' :0,
      \ 'ai' :0,
      \ })
" }

" To be removed...
vmap <Leader>y "+y
vmap <Leader>d "+d
nmap <Leader>p "+p
vmap <Leader>p "+p
nmap <Leader>P "+P
" ... till here.

" map space to leader and define more mappings {
nmap <Leader>i ^
vmap <Leader>i ^
nmap <Leader>a $
vmap <Leader>a $h| "h is to shift left one character
nmap <Leader>g %
vmap <Leader>g %
nmap <Leader>/ y:noh<CR>
map <Leader>cd :cd %:p:h<CR>
vmap <Leader>f y:grep -Ir '<C-R>"' *<CR>
vmap <Leader>r y:Ggrep '<C-R>"' *<CR>
nnoremap <Leader><CR> m`o<Esc>``| " put a new line after this line
:vmap * y/<C-R>"<CR>| " Search highlighted
:vmap <leader>s y:<C-U>%s/\<<c-r>"\>/| " Pull Visually Hghlghtd text to LHS of a substitute
:nnoremap <leader>s :<C-U>%s/\<<c-r>*\>/| " Pull clipboard text to LHS of a substitute
" }

" NOT NEEDED: vnoremap <silent> p p`]
" Now I can select some text and paste over it without worrying my paste buffer is
" replaced by just just removed text. Now, vp doesn't replace paste buffer {
function! RestoreRegister()
  let @" = s:restore_reg
  return ''
endfunction
function! s:Repl()
  let s:restore_reg = @"
  return "p@=RestoreRegister()\<cr>`]"
endfunction
vmap <silent> <expr> p <sid>Repl()
" }

"terminator: highlight Pmenu color from purple to more visible
"highlight Pmenu ctermbg=brown cterm=bold

"Ctrl-P {
" nnoremap <Leader>o :CtrlPCurFile<CR>
nnoremap <Leader>o :CtrlPMixed<CR>
"" Show MRU files for the current project only
let g:ctrlp_mruf_relative = 1
" Open files of vim in new tab
let g:ctrlp_open_new_file = 't'
let g:ctrlp_prompt_mappings = {
    \ 'AcceptSelection("e")': ['<c-t>'],
    \ 'AcceptSelection("t")': ['<cr>'],
    \ }
let g:ctrlp_custom_ignore = {
  \ 'dir':  '\v[\/]\.(git|hg|svn)$',
  \ 'file': '\v\.(pdf|png|jpeg|css|tmpl|gif|dat|jpg|scss|kmz|pyc)$',
  \ 'link': 'some_bad_symbolic_links',
  \ }
" }

" Statusline {
set statusline=%t%h%m%r%{fugitive#statusline()}%y%=%c,%l/%L\ %P "show git branch
set laststatus=2
highlight statusline cterm=bold ctermbg=black ctermfg=grey 
" }

" Quickly edit/reload the vimrc file {
nmap <silent> <leader>ev :tabe $MYVIMRC<CR>
nmap <silent> <leader>sv :so $MYVIMRC<CR>
" }

" Quickly view the pwd {
nmap <silent> <leader>pwd :echo @%<CR>
" }

" Set vim folds {
set foldmethod=indent   "fold based on indent
set foldnestmax=5      "deepest fold is 5 levels
set foldlevelstart=20
set nofoldenable        "dont fold by default
autocmd Syntax c,cpp,json,html setlocal foldmethod=syntax
nnoremap <space>z za
" }

" Highlight trailing whitespaches {
highlight ExtraWhitespace ctermbg=red guibg=red
match ExtraWhitespace /\s\+$/
autocmd BufWinEnter * match ExtraWhitespace /\s\+$/
autocmd InsertEnter * match ExtraWhitespace /\s\+\%#\@<!$/
autocmd InsertLeave * match ExtraWhitespace /\s\+$/
autocmd BufWinLeave * call clearmatches()
" }

" .swp message is absent cuz of: shortmess+=A
" Keep all swp files in ~/.vim {
set backupdir=~/.vim/backup//
set directory=~/.vim/swap//
set undodir=~/.vim/undo//
" }

set colorcolumn=80

" move vertically by visual line
nnoremap j gj
nnoremap k gk

if filereadable(glob("~/.local_vimrc"))
	source ~/.local_vimrc
endif
