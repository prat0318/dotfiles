if has('vim_starting')
 set nocompatible               " Be iMproved

 " Required:
 set runtimepath+=~/.vim/bundle/neobundle.vim/
endif

" Required:
call neobundle#begin(expand('~/.vim/bundle/'))

" Let NeoBundle manage NeoBundle
" Required:
NeoBundleFetch 'Shougo/neobundle.vim'

" My Bundles here:
NeoBundle 'terryma/vim-expand-region'
NeoBundle 'scrooloose/nerdtree'
NeoBundle 'jistr/vim-nerdtree-tabs'
NeoBundle 'kien/ctrlp.vim'
NeoBundle 'tpope/vim-fugitive'
NeoBundle 'tpope/vim-eunuch'
NeoBundle 'tpope/vim-endwise'
NeoBundle 'Valloric/YouCompleteMe'
NeoBundle 'Valloric/ListToggle'

call neobundle#end()

filetype plugin indent on

" If there are uninstalled bundles found on startup,
" this will conveniently prompt you to install them.
NeoBundleCheck

let mapleader = "\<Space>"

"Disable pathogen for now
"execute pathogen#infect()

set wildignore+=*/tmp/*,*.so,*.swp,*.zip,*.d,*.o,*.pyc     " MacOSX/Linux

"global ymc_conf
let g:ycm_global_ycm_extra_conf = '~/.ycm_extra_conf.py'
"turn off confirmation message from ycm
let g:ycm_confirm_extra_conf = 0
"add errors in the location list
let g:ycm_always_populate_location_list = 1
"compile c++ code with clang on the spot
let g:ycm_show_diagnostics_ui = 1
let g:ycm_min_num_of_chars_for_completion = 2
let g:ycm_auto_trigger = 1
let g:lt_location_list_toggle_map = '<F6>'
let g:lt_quickfix_list_toggle_map = '<F8>'

set hlsearch
set numberwidth=3
syntax on

"Create parent directories on save, if not present
augroup BWCCreateDir
	autocmd!
	autocmd BufWritePre * if expand("<afile>")!~#'^\w\+:/' && !isdirectory(expand("%:h")) | execute "silent! !mkdir -p ".shellescape(expand('%:h'), 1) | redraw! | endif
augroup END

let NERDTreeMapActivateNode='f'
let NERDTreeIgnore = ['\.pyc$', '\.out$']
let g:nerdtree_tabs_open_on_console_startup=0
let NERDTreeWinSize=28

nnoremap <F4> :NERDTreeFind<CR>
nnoremap <F5> :NERDTreeToggle<CR>

"tab movements"
inoremap <C-h> <Esc>:tabprevious<CR>
inoremap <C-l> <Esc>:tabnext<CR>

nnoremap <C-h> :tabprevious<CR>
nnoremap <C-l> :tabnext<CR>

nnoremap <Leader>h :tabprevious<CR>
nnoremap <Leader>l :tabnext<CR>

"vim split movements
nmap <silent> <A-Up> :wincmd k<CR>
nmap <silent> <A-Down> :wincmd j<CR>
nmap <silent> <A-Left> :wincmd h<CR>
nmap <silent> <A-Right> :wincmd l<CR>

imap <silent> <A-Up> <Esc>:wincmd k<CR>
imap <silent> <A-Down> <Esc>:wincmd j<CR>
imap <silent> <A-Left> <Esc>:wincmd h<CR>
imap <silent> <A-Right> <Esc>:wincmd l<CR>

set pastetoggle=<F3>
"autocmd Filetype python setlocal ts=8 et sw=4 sts=4

"colorscheme torte

nnoremap <F2> :set nonumber!<CR>
"nnoremap <C-j> :set invnumber<CR>
"inoremap <C-j> <Esc>:set invnumber<CR>

inoremap jk <Esc>
inoremap jkj <Esc>:w<CR>
inoremap jkjk <Esc>:wq<CR>
"inoremap {{  {<CR>}<Esc>O

"" SOLARIZED THEME
"set background=dark
"set t_Co=16
"let g:solarized_termcolors=16
"colorscheme solarized

if filereadable(glob("~/.local_vimrc")) 
	source ~/.local_vimrc
endif

"Expand visual region settings
vmap v <Plug>(expand_region_expand)
vmap <C-v> <Plug>(expand_region_shrink)

call expand_region#custom_text_objects({
      \ "\/\\n\\n\<CR>": 1,
      \ 'i>' :1,
      \ 'a>' :1,
      \ 'a]' :1,
      \ 'ab' :1,
      \ 'aB' :1,
      \ 'ii' :0,
      \ 'ai' :0,
      \ })

"match < and > for C++ templates
set matchpairs+=<:>

"go back to original point after selection
vnoremap <silent> y y`]
vnoremap <silent> p p`]
nnoremap <silent> p p`]

"map q: for typo
map q: :q

"map space to leader and define more mappings
vmap <Leader>y "+y
vmap <Leader>d "+d
nmap <Leader>p "+p
nmap <Leader>P "+P
vmap <Leader>p "+p
nmap <Leader>i ^
nmap <Leader>a $
nmap <Leader>g %
nmap <Leader>/ /asdfgh<CR>

" Now I can select some text and paste over it without 
" worrying my paste buffer is
" replaced by just just removed text
" vp doesn't replace paste buffer
function! RestoreRegister()
  let @" = s:restore_reg
  return ''
endfunction
function! s:Repl()
  let s:restore_reg = @"
  return "p@=RestoreRegister()\<cr>"
endfunction
vmap <silent> <expr> p <sid>Repl()

"highlight Pmenu color from purple to more visible
highlight Pmenu ctermbg=brown cterm=bold

"quick fix menu options
set switchbuf+=usetab,newtab

"Ctrl-P
nnoremap <Leader>o :CtrlPCurWD<CR>
"nnoremap <Leader>o :CtrlPMixed<CR>
"" Show MRU files for the current project only
let g:ctrlp_mruf_relative = 1
" Open files of vim in new tab
let g:ctrlp_open_new_file = 't'
let g:ctrlp_prompt_mappings = {
    \ 'AcceptSelection("e")': ['<c-t>'],
    \ 'AcceptSelection("t")': ['<cr>'],
    \ }

"show git branch on vim footer
set statusline=%t%h%m%r%{fugitive#statusline()}%y%=%c,%l/%L\ %P
set laststatus=2
highlight statusline cterm=bold ctermbg=black ctermfg=grey 

"Fugitive mappings
"autocmd QuickFixCmdPost *grep* cwindow

map <Leader>cd :cd %:p:h<CR>
vmap <Leader>f y:grep -I '<C-R>"' *<CR>
vmap <Leader>r y:Ggrep '<C-R>"' *<CR>
vmap <Leader>f y:grep -I '<C-R>"' *<CR>

" put a new line after this line
nnoremap <CR> m`o<Esc>``
